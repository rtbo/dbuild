module dbuild.cook.log;

enum cmdsLogFile = ".cook_cmds";

/// CmdLog wraps a file that log a hash for each command in a build graph.
/// For each output that is generated by a rule, a CmdLog.Entry is appended
/// in the list. On a later build, the log is read to check whether the command
/// line has changed
class CmdLog
{
    import std.stdio : File;

    struct Entry
    {
        long mtime;
        ulong hash;
    }

    private Entry[string] entries;
    private File file;
    private uint dups;

    this (string path)
    {
        import std.format : formattedRead;

        file = File(path, "a+");

        foreach (l; file.byLine) {
            Entry e;
            string output;
            formattedRead!"%s %s %s"(l, e.mtime, e.hash, output);
            auto ep = output in entries;
            if (ep) {
                *ep = e;
                dups++;
            }
            else {
                entries[output] = e;
            }
        }
    }

    void close()
    {
        scope(exit) file.close();

        if (dups*10 > entries.length) {
            file.reopen(file.name, "wb");
            foreach (output, entry; entries) {
                file.writefln("%s %s %s", entry.mtime, entry.hash, output);
            }
            file.close();
        }
    }

    const(Entry)* entry(in string output) const
    {
        return output in entries;
    }

    void setEntry(in string output, in Entry entry)
    {
        auto ep = output in entries;
        if (ep) {
            *ep = entry;
            dups++;
        }
        else {
            entries[output] = entry;
        }
        file.writefln("%s %s %s", entry.mtime, entry.hash, output);
    }

}
